{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"MatrixExpo": {
		"prefix": "matexpo",
		"body": [
		  "const int N = , MOD = ;",
		  "",
		  "struct matrix {",
		  "    __int128_t mat[N][N];",
		  "    int r, c;",
		  "    matrix(int rr, int cc) {",
		  "        r = rr, c = cc;",
		  "        memset(mat, 0, sizeof mat);",
		  "    }",
		  "    matrix operator *(const matrix &b) {",
		  "        assert(c == b.r);",
		  "        matrix res(r, b.c);",
		  "        for(int i = 0; i < res.r; ++i) {",
		  "            for(int j = 0; j < res.c; ++j) {",
		  "                for(int k = 0; k < c; ++k) {",
		  "                    (res.mat[i][j] += (mat[i][k] % MOD * b.mat[k][j] % MOD) % MOD) %= MOD;",
		  "                }",
		  "            }",
		  "        }",
		  "        return res;",
		  "    }",
		  "    matrix operator ^(int64_t n) {",
		  "        matrix ans = *this, x = ans;",
		  "        for(n--; n > 0; n >>= 1) {",
		  "            if(n & 1) ans = ans * x;",
		  "            x = x * x;",
		  "        }",
		  "        return ans;",
		  "    }    ",
		  "};"
		],
		"description": "MatrixExpo"
	  },
	  "Binary Power": {
		"prefix": "bigmod",
		"body": [
		  "int64_t binpow(int64_t x, int64_t n, int64_t p = p) {",
		  "    int64_t res = 1;",
		  "    for(; n > 0; n >>= 1) {",
		  "        if(n & 1) res = res * x % p;",
		  "        x = x * x % p;",
		  "    }",
		  "    return res % p;",
		  "}"
		],
		"description": "Binary Power"
		},

		"Binomial": {
			"prefix": "ncr",
			"body": [
				"const int N = , P = 7 + 1e9;",
				"int64_t fac[N + 1], invfac[N + 1];",
				"",
				"int64_t binpow(int64_t x, int64_t n) {",
				"    int64_t res = 1;",
				"    while(n) {",
				"        if(n & 1) res = (res * x) % P;",
				"        x = (x * x) % P;",
				"        n >>= 1;",
				"    }",
				"    return res % P;",
				"}",
				"",
				"void precalc() {",
				"    fac[0] = invfac[0] = 1LL;;",
				"    for(int i = 1; i <= N; ++i) fac[i] = i * fac[i - 1] % P;",
				"    for(int i = 1; i <= N; ++i) invfac[i] = invfac[i - 1] * binpow(i, P - 2) % P;",
				"}"
			],
			"description": "Binomial"
		  },
		"MultipleTestCases": {
			"prefix": "mcpp",
			"body": [
			  "#include <bits/stdc++.h>",
			  "using namespace std;",
			  "",
			  "#ifdef FFS",
			  "#include <debug.h>",
			  "#else",
			  "#define debug(args...)",
			  "#endif",
			  "",
			  "void solve() {",
			  "    ",
			  "}",
			  "",
			  "signed main() {",
			  "    ios_base::sync_with_stdio(false), cin.tie(nullptr);",
			  "    int ts; cin >> ts;",
			  "    for (int cs = 1; cs <= ts; cs++) {",
			  "        //cout << \"Case \" << cs << \": \";",
			  "        solve();",
			  "    }",
			  "    return 0;",
			  "}"
			],
			"description": "MultiTestCase"	
		},
		"SingleTestCase": {
			"prefix": "ncpp",
			"body": [
			  "#include <bits/stdc++.h>",
			  "using namespace std;",
			  "",
			  "#ifdef FFS",
			  "#include <debug.h>",
			  "#else",
			  "#define debug(args...)",
			  "#endif",
			  "",
			  "signed main() {",
			  "    ios_base::sync_with_stdio(false), cin.tie(nullptr);",
			  "    ",
			  "}"
			],
			"description": "SingleTestCase"
		},
		"Lab": {
			"prefix": "cpp",
			"body": [
			  "#include <iostream>",
			  "using namespace std;",
			  "",
			  "int main() {",
			  "",
			  "}"
		
			],
			"description": "Lab"
		  },
		  "ncr": {
			"prefix": "ncr-dp",
			"body": [
			  "void nCr() {",
			  "    C[0][0] = 1;",
			  "    for (int n = 1; n <= N; ++n) {",
			  "        C[n][0] = C[n][n] = 1;",
			  "        for (int k = 1; k < n; ++k)",
			  "            C[n][k] = C[n - 1][k - 1] + C[n - 1][k];",
			  "    }",
			  "}"
			],
			"description": "ncr"
		  },
		  "Sieve": {
			"prefix": "prime_sieve",
			"body": [
			  "const int N = ;",
			  "vector <bool> is_prime(N + 1, true);",
			  "vector <int> primes;",
			  "void sieve()",
			  "{",
			  "    is_prime[0] = is_prime[1] = false;",
			  "    for(int i = 2; (long long) i * i <= N; ++i) if(is_prime[i]) for(int j = i * i; j <= N ; j += i) is_prime[j] = false; ",
			  "    for(int i = 2; i < N; ++i) if(is_prime[i]) primes.emplace_back(i);",
			  "}"
			],
			"description": "Sieve"
		  }
}
